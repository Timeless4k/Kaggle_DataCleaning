{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d5ee9d9",
   "metadata": {
    "papermill": {
     "duration": 0.004916,
     "end_time": "2025-05-02T03:40:38.262491",
     "exception": false,
     "start_time": "2025-05-02T03:40:38.257575",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**This notebook is an exercise in the [Data Cleaning](https://www.kaggle.com/learn/data-cleaning) course.  You can reference the tutorial at [this link](https://www.kaggle.com/alexisbcook/scaling-and-normalization).**\n",
    "\n",
    "---\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1e4992a4",
   "metadata": {
    "papermill": {
     "duration": 0.003565,
     "end_time": "2025-05-02T03:40:38.270365",
     "exception": false,
     "start_time": "2025-05-02T03:40:38.266800",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "In this exercise, you'll apply what you learned in the **Scaling and normalization** tutorial.\n",
    "\n",
    "# Setup\n",
    "\n",
    "The questions below will give you feedback on your work. Run the following cell to set up the feedback system."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c39964fc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-02T03:40:38.279661Z",
     "iopub.status.busy": "2025-05-02T03:40:38.279314Z",
     "iopub.status.idle": "2025-05-02T03:40:45.407308Z",
     "shell.execute_reply": "2025-05-02T03:40:45.405924Z"
    },
    "papermill": {
     "duration": 7.134786,
     "end_time": "2025-05-02T03:40:45.409089",
     "exception": false,
     "start_time": "2025-05-02T03:40:38.274303",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Setup Complete\n"
     ]
    }
   ],
   "source": [
    "from learntools.core import binder\n",
    "binder.bind(globals())\n",
    "from learntools.data_cleaning.ex2 import *\n",
    "print(\"Setup Complete\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "530cc8a5",
   "metadata": {
    "papermill": {
     "duration": 0.003851,
     "end_time": "2025-05-02T03:40:45.417242",
     "exception": false,
     "start_time": "2025-05-02T03:40:45.413391",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Get our environment set up\n",
    "\n",
    "To practice scaling and normalization, we're going to use a [dataset of Kickstarter campaigns](https://www.kaggle.com/kemical/kickstarter-projects). (Kickstarter is a website where people can ask people to invest in various projects and concept products.)\n",
    "\n",
    "The next code cell loads in the libraries and dataset we'll be using. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d0366fa4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-02T03:40:45.426598Z",
     "iopub.status.busy": "2025-05-02T03:40:45.426218Z",
     "iopub.status.idle": "2025-05-02T03:40:47.317053Z",
     "shell.execute_reply": "2025-05-02T03:40:47.315932Z"
    },
    "papermill": {
     "duration": 1.898083,
     "end_time": "2025-05-02T03:40:47.319192",
     "exception": false,
     "start_time": "2025-05-02T03:40:45.421109",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# modules we'll use\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "# for Box-Cox Transformation\n",
    "from scipy import stats\n",
    "\n",
    "# for min_max scaling\n",
    "from mlxtend.preprocessing import minmax_scaling\n",
    "\n",
    "# plotting modules\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# read in all our data\n",
    "kickstarters_2017 = pd.read_csv(\"../input/kickstarter-projects/ks-projects-201801.csv\")\n",
    "\n",
    "# set seed for reproducibility\n",
    "np.random.seed(0)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d7b4c256",
   "metadata": {
    "papermill": {
     "duration": 0.003661,
     "end_time": "2025-05-02T03:40:47.327344",
     "exception": false,
     "start_time": "2025-05-02T03:40:47.323683",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Let's start by scaling the goals of each campaign, which is how much money they were asking for.  After scaling, all values lie between 0 and 1."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "8b399dac",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-02T03:40:47.336857Z",
     "iopub.status.busy": "2025-05-02T03:40:47.336469Z",
     "iopub.status.idle": "2025-05-02T03:40:47.379503Z",
     "shell.execute_reply": "2025-05-02T03:40:47.378084Z"
    },
    "papermill": {
     "duration": 0.050351,
     "end_time": "2025-05-02T03:40:47.381556",
     "exception": false,
     "start_time": "2025-05-02T03:40:47.331205",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original data\n",
      "Preview:\n",
      "    usd_goal_real\n",
      "0        1533.95\n",
      "1       30000.00\n",
      "2       45000.00\n",
      "3        5000.00\n",
      "4       19500.00\n",
      "Minimum value: 0.01 \n",
      "Maximum value: 166361390.71\n",
      "______________________________\n",
      "\n",
      "Scaled data\n",
      "Preview:\n",
      "    usd_goal_real\n",
      "0       0.000009\n",
      "1       0.000180\n",
      "2       0.000270\n",
      "3       0.000030\n",
      "4       0.000117\n",
      "Minimum value: 0.0 \n",
      "Maximum value: 1.0\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_13/93515903.py:8: FutureWarning: Calling float on a single element Series is deprecated and will raise a TypeError in the future. Use float(ser.iloc[0]) instead\n",
      "  print('Minimum value:', float(original_data.min()),\n",
      "/tmp/ipykernel_13/93515903.py:9: FutureWarning: Calling float on a single element Series is deprecated and will raise a TypeError in the future. Use float(ser.iloc[0]) instead\n",
      "  '\\nMaximum value:', float(original_data.max()))\n",
      "/tmp/ipykernel_13/93515903.py:13: FutureWarning: Calling float on a single element Series is deprecated and will raise a TypeError in the future. Use float(ser.iloc[0]) instead\n",
      "  print('Minimum value:', float(scaled_data.min()),\n",
      "/tmp/ipykernel_13/93515903.py:14: FutureWarning: Calling float on a single element Series is deprecated and will raise a TypeError in the future. Use float(ser.iloc[0]) instead\n",
      "  '\\nMaximum value:', float(scaled_data.max()))\n"
     ]
    }
   ],
   "source": [
    "# select the usd_goal_real column\n",
    "original_data = pd.DataFrame(kickstarters_2017.usd_goal_real)\n",
    "\n",
    "# scale the goals from 0 to 1\n",
    "scaled_data = minmax_scaling(original_data, columns=['usd_goal_real'])\n",
    "\n",
    "print('Original data\\nPreview:\\n', original_data.head())\n",
    "print('Minimum value:', float(original_data.min()),\n",
    "      '\\nMaximum value:', float(original_data.max()))\n",
    "print('_'*30)\n",
    "\n",
    "print('\\nScaled data\\nPreview:\\n', scaled_data.head())\n",
    "print('Minimum value:', float(scaled_data.min()),\n",
    "      '\\nMaximum value:', float(scaled_data.max()))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "afd64865",
   "metadata": {
    "papermill": {
     "duration": 0.003934,
     "end_time": "2025-05-02T03:40:47.390396",
     "exception": false,
     "start_time": "2025-05-02T03:40:47.386462",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 1) Practice scaling\n",
    "\n",
    "We just scaled the \"usd_goal_real\" column. What about the \"goal\" column?\n",
    "\n",
    "Begin by running the code cell below to create a DataFrame `original_goal_data` containing the \"goal\" column."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "81295e77",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-02T03:40:47.400898Z",
     "iopub.status.busy": "2025-05-02T03:40:47.399845Z",
     "iopub.status.idle": "2025-05-02T03:40:47.406718Z",
     "shell.execute_reply": "2025-05-02T03:40:47.405549Z"
    },
    "papermill": {
     "duration": 0.013831,
     "end_time": "2025-05-02T03:40:47.408450",
     "exception": false,
     "start_time": "2025-05-02T03:40:47.394619",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# select the usd_goal_real column\n",
    "original_goal_data = pd.DataFrame(kickstarters_2017.goal)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e846c753",
   "metadata": {
    "papermill": {
     "duration": 0.003662,
     "end_time": "2025-05-02T03:40:47.416174",
     "exception": false,
     "start_time": "2025-05-02T03:40:47.412512",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Use `original_goal_data` to create a new DataFrame `scaled_goal_data` with values scaled between 0 and 1. You must use the `minmax_scaling()` function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "19bc1686",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-02T03:40:47.425226Z",
     "iopub.status.busy": "2025-05-02T03:40:47.424868Z",
     "iopub.status.idle": "2025-05-02T03:40:47.451330Z",
     "shell.execute_reply": "2025-05-02T03:40:47.450199Z"
    },
    "papermill": {
     "duration": 0.033249,
     "end_time": "2025-05-02T03:40:47.453254",
     "exception": false,
     "start_time": "2025-05-02T03:40:47.420005",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.3333333333333333, \"interactionType\": 1, \"questionType\": 1, \"questionId\": \"1_TryScaling\", \"learnToolsVersion\": \"0.3.5\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#33cc33\">Correct</span>"
      ],
      "text/plain": [
       "Correct"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# TODO: Your code here\n",
    "scaled_goal_data = minmax_scaling(original_goal_data, columns=['goal'])\n",
    "\n",
    "# Check your answer\n",
    "q1.check()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "100aa1bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-02T03:40:47.463336Z",
     "iopub.status.busy": "2025-05-02T03:40:47.462942Z",
     "iopub.status.idle": "2025-05-02T03:40:47.468150Z",
     "shell.execute_reply": "2025-05-02T03:40:47.467043Z"
    },
    "papermill": {
     "duration": 0.011723,
     "end_time": "2025-05-02T03:40:47.469643",
     "exception": false,
     "start_time": "2025-05-02T03:40:47.457920",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Lines below will give you a hint or solution code\n",
    "#q1.hint()\n",
    "#q1.solution()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf89f275",
   "metadata": {
    "papermill": {
     "duration": 0.003983,
     "end_time": "2025-05-02T03:40:47.477892",
     "exception": false,
     "start_time": "2025-05-02T03:40:47.473909",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 2) Practice normalization\n",
    "\n",
    "Now you'll practice normalization. We begin by normalizing the amount of money pledged to each campaign."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "d6546efe",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-02T03:40:47.487854Z",
     "iopub.status.busy": "2025-05-02T03:40:47.487446Z",
     "iopub.status.idle": "2025-05-02T03:40:51.258033Z",
     "shell.execute_reply": "2025-05-02T03:40:51.257063Z"
    },
    "papermill": {
     "duration": 3.778306,
     "end_time": "2025-05-02T03:40:51.260217",
     "exception": false,
     "start_time": "2025-05-02T03:40:47.481911",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original data\n",
      "Preview:\n",
      " 1     2421.0\n",
      "2      220.0\n",
      "3        1.0\n",
      "4     1283.0\n",
      "5    52375.0\n",
      "Name: usd_pledged_real, dtype: float64\n",
      "Minimum value: 0.45 \n",
      "Maximum value: 20338986.27\n",
      "______________________________\n",
      "\n",
      "Normalized data\n",
      "Preview:\n",
      " 1    10.165143\n",
      "2     6.468598\n",
      "3     0.000000\n",
      "4     9.129277\n",
      "5    15.836853\n",
      "Name: usd_pledged_real, dtype: float64\n",
      "Minimum value: -0.7779954120722626 \n",
      "Maximum value: 30.69054040635253\n"
     ]
    }
   ],
   "source": [
    "# get the index of all positive pledges (Box-Cox only takes positive values)\n",
    "index_of_positive_pledges = kickstarters_2017.usd_pledged_real > 0\n",
    "\n",
    "# get only positive pledges (using their indexes)\n",
    "positive_pledges = kickstarters_2017.usd_pledged_real.loc[index_of_positive_pledges]\n",
    "\n",
    "# normalize the pledges (w/ Box-Cox)\n",
    "normalized_pledges = pd.Series(stats.boxcox(positive_pledges)[0], \n",
    "                               name='usd_pledged_real', index=positive_pledges.index)\n",
    "\n",
    "print('Original data\\nPreview:\\n', positive_pledges.head())\n",
    "print('Minimum value:', float(positive_pledges.min()),\n",
    "      '\\nMaximum value:', float(positive_pledges.max()))\n",
    "print('_'*30)\n",
    "\n",
    "print('\\nNormalized data\\nPreview:\\n', normalized_pledges.head())\n",
    "print('Minimum value:', float(normalized_pledges.min()),\n",
    "      '\\nMaximum value:', float(normalized_pledges.max()))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "de3487e7",
   "metadata": {
    "papermill": {
     "duration": 0.003987,
     "end_time": "2025-05-02T03:40:51.268607",
     "exception": false,
     "start_time": "2025-05-02T03:40:51.264620",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The values have changed significantly with normalization!\n",
    "\n",
    "In the next code cell, you'll take a look at the distribution of the normalized data, where it should now resemble a normal distribution."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f9f2c738",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-02T03:40:51.278105Z",
     "iopub.status.busy": "2025-05-02T03:40:51.277737Z",
     "iopub.status.idle": "2025-05-02T03:40:53.305938Z",
     "shell.execute_reply": "2025-05-02T03:40:53.304763Z"
    },
    "papermill": {
     "duration": 2.035031,
     "end_time": "2025-05-02T03:40:53.307720",
     "exception": false,
     "start_time": "2025-05-02T03:40:51.272689",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot normalized data\n",
    "ax = sns.histplot(normalized_pledges, kde=True)\n",
    "ax.set_title(\"Normalized data\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f8030447",
   "metadata": {
    "papermill": {
     "duration": 0.004842,
     "end_time": "2025-05-02T03:40:53.318516",
     "exception": false,
     "start_time": "2025-05-02T03:40:53.313674",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "We used the \"usd_pledged_real\" column. Follow the same process to normalize the \"pledged\" column. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "defe07a4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-02T03:40:53.330219Z",
     "iopub.status.busy": "2025-05-02T03:40:53.329823Z",
     "iopub.status.idle": "2025-05-02T03:40:58.243896Z",
     "shell.execute_reply": "2025-05-02T03:40:58.242753Z"
    },
    "papermill": {
     "duration": 4.92216,
     "end_time": "2025-05-02T03:40:58.245821",
     "exception": false,
     "start_time": "2025-05-02T03:40:53.323661",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# TODO: Your code here!\n",
    "# Step 1: Get the index of all positive pledged values\n",
    "index_of_positive_pledged = kickstarters_2017.pledged > 0\n",
    "\n",
    "# Step 2: Filter the positive pledged values using the index\n",
    "positive_pledged = kickstarters_2017.pledged.loc[index_of_positive_pledged]\n",
    "\n",
    "# Step 3: Apply Box-Cox normalization\n",
    "normalized_pledged = pd.Series(stats.boxcox(positive_pledged)[0],\n",
    "                                name='pledged', index=positive_pledged.index)\n",
    "\n",
    "# Optional: Visualize the result\n",
    "ax = sns.histplot(normalized_pledged, kde=True)\n",
    "ax.set_title(\"Normalized 'pledged' Data\")\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "408f5065",
   "metadata": {
    "papermill": {
     "duration": 0.005432,
     "end_time": "2025-05-02T03:40:58.257708",
     "exception": false,
     "start_time": "2025-05-02T03:40:58.252276",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "How does the normalized \"usd_pledged_real\" column look different from when we normalized the \"pledged\" column?  Or, do they look mostly the same?\n",
    "\n",
    "Once you have an answer, run the code cell below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "f8d300fe",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-02T03:40:58.271609Z",
     "iopub.status.busy": "2025-05-02T03:40:58.270821Z",
     "iopub.status.idle": "2025-05-02T03:40:58.279442Z",
     "shell.execute_reply": "2025-05-02T03:40:58.278507Z"
    },
    "papermill": {
     "duration": 0.017982,
     "end_time": "2025-05-02T03:40:58.281315",
     "exception": false,
     "start_time": "2025-05-02T03:40:58.263333",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.3333333333333333, \"interactionType\": 1, \"questionType\": 4, \"questionId\": \"2_TryNormalization\", \"learnToolsVersion\": \"0.3.5\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#33cc33\">Correct:</span> \n",
       "\n",
       "The distributions in the normalized data look mostly the same."
      ],
      "text/plain": [
       "Correct: \n",
       "\n",
       "The distributions in the normalized data look mostly the same."
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Check your answer (Run this code cell to receive credit!)\n",
    "q2.check()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "6e6d69d5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-02T03:40:58.295333Z",
     "iopub.status.busy": "2025-05-02T03:40:58.294915Z",
     "iopub.status.idle": "2025-05-02T03:40:58.299713Z",
     "shell.execute_reply": "2025-05-02T03:40:58.298660Z"
    },
    "papermill": {
     "duration": 0.013946,
     "end_time": "2025-05-02T03:40:58.301526",
     "exception": false,
     "start_time": "2025-05-02T03:40:58.287580",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Line below will give you a hint\n",
    "#q2.hint()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9e498c3a",
   "metadata": {
    "papermill": {
     "duration": 0.005265,
     "end_time": "2025-05-02T03:40:58.312735",
     "exception": false,
     "start_time": "2025-05-02T03:40:58.307470",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# (Optional) More practice\n",
    "\n",
    "Try finding a new dataset and pretend you're preparing to perform a [regression analysis](https://www.kaggle.com/rtatman/the-5-day-regression-challenge). \n",
    "\n",
    "[These datasets are a good start!](https://www.kaggle.com/rtatman/datasets-for-regression-analysis)\n",
    "\n",
    "Pick three or four variables and decide if you need to normalize or scale any of them and, if you think you should, practice applying the correct technique.\n",
    "\n",
    "# Keep going\n",
    "\n",
    "In the next lesson, learn how to [**parse dates**](https://www.kaggle.com/alexisbcook/parsing-dates) in a dataset."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1823ba1f",
   "metadata": {
    "papermill": {
     "duration": 0.005262,
     "end_time": "2025-05-02T03:40:58.323712",
     "exception": false,
     "start_time": "2025-05-02T03:40:58.318450",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "---\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "*Have questions or comments? Visit the [course discussion forum](https://www.kaggle.com/learn/data-cleaning/discussion) to chat with other learners.*"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 4104,
     "sourceId": 16930,
     "sourceType": "datasetVersion"
    }
   ],
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 26.188481,
   "end_time": "2025-05-02T03:40:59.152769",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-05-02T03:40:32.964288",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
